// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Vocabi.Infrastructure.Persistence;

#nullable disable

namespace Vocabi.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250909135149_AddVocabularyFlashcardsTable")]
    partial class AddVocabularyFlashcardsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Vocabi.Domain.Aggregates.LookupEntries.LookupEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Headword")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PartOfSpeech")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Pronunciation")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("LookupEntries", (string)null);
                });

            modelBuilder.Entity("Vocabi.Domain.Aggregates.MediaFiles.MediaFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)");

                    b.Property<string>("Provider")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("MediaFiles", (string)null);
                });

            modelBuilder.Entity("Vocabi.Domain.Aggregates.Vocabularies.Vocabulary", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Cloze")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Definition")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Example")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Meaning")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PartOfSpeech")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Pronunciation")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.ToTable("Vocabularies", (string)null);
                });

            modelBuilder.Entity("Vocabi.Domain.Aggregates.LookupEntries.LookupEntry", b =>
                {
                    b.OwnsMany("Vocabi.Domain.Aggregates.LookupEntries.LookupEntryDefinition", "Definitions", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("LookupEntryId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)");

                            b1.HasKey("Id");

                            b1.HasIndex("LookupEntryId");

                            b1.ToTable("LookupEntryDefinitions", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("LookupEntryId");

                            b1.OwnsMany("Vocabi.Domain.Aggregates.LookupEntries.LookupEntryExample", "Examples", b2 =>
                                {
                                    b2.Property<Guid>("Id")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("LookupEntryDefinitionId")
                                        .HasColumnType("uuid");

                                    b2.Property<string>("Text")
                                        .IsRequired()
                                        .HasMaxLength(1000)
                                        .HasColumnType("character varying(1000)");

                                    b2.HasKey("Id");

                                    b2.HasIndex("LookupEntryDefinitionId");

                                    b2.ToTable("LookupEntryExamples", (string)null);

                                    b2.WithOwner()
                                        .HasForeignKey("LookupEntryDefinitionId");
                                });

                            b1.Navigation("Examples");
                        });

                    b.OwnsMany("Vocabi.Domain.Aggregates.LookupEntries.LookupEntryMeaning", "Meanings", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("LookupEntryId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Text")
                                .IsRequired()
                                .HasMaxLength(1000)
                                .HasColumnType("character varying(1000)");

                            b1.HasKey("Id");

                            b1.HasIndex("LookupEntryId");

                            b1.ToTable("LookupEntryMeanings", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("LookupEntryId");
                        });

                    b.OwnsMany("Vocabi.Domain.Aggregates.LookupEntries.LookupEntryMediaFile", "MediaFiles", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("LookupEntryId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MediaFileId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("LookupEntryId");

                            b1.HasIndex("MediaFileId");

                            b1.ToTable("LookupEntryMediaFiles", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("LookupEntryId");

                            b1.HasOne("Vocabi.Domain.Aggregates.MediaFiles.MediaFile", null)
                                .WithMany()
                                .HasForeignKey("MediaFileId")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();
                        });

                    b.Navigation("Definitions");

                    b.Navigation("Meanings");

                    b.Navigation("MediaFiles");
                });

            modelBuilder.Entity("Vocabi.Domain.Aggregates.Vocabularies.Vocabulary", b =>
                {
                    b.OwnsOne("Vocabi.Domain.Aggregates.Vocabularies.VocabularyFlashcard", "Flashcard", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<DateTime>("CreatedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<long?>("NoteId")
                                .HasColumnType("bigint");

                            b1.Property<string>("Status")
                                .IsRequired()
                                .HasColumnType("text");

                            b1.Property<Guid>("VocabularyId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("VocabularyId")
                                .IsUnique();

                            b1.ToTable("VocabularyFlashcards", (string)null);

                            b1.WithOwner("Vocabulary")
                                .HasForeignKey("VocabularyId");

                            b1.Navigation("Vocabulary");
                        });

                    b.OwnsMany("Vocabi.Domain.Aggregates.Vocabularies.VocabularyMediaFile", "MediaFiles", b1 =>
                        {
                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<Guid>("MediaFileId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("VocabularyId")
                                .HasColumnType("uuid");

                            b1.HasKey("Id");

                            b1.HasIndex("MediaFileId");

                            b1.HasIndex("VocabularyId");

                            b1.ToTable("VocabularyMediaFiles", (string)null);

                            b1.HasOne("Vocabi.Domain.Aggregates.MediaFiles.MediaFile", null)
                                .WithMany()
                                .HasForeignKey("MediaFileId")
                                .OnDelete(DeleteBehavior.Restrict)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("VocabularyId");
                        });

                    b.Navigation("Flashcard");

                    b.Navigation("MediaFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
