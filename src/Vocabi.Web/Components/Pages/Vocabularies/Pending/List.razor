@page "/vocabularies/pending"
@rendermode InteractiveServer
@using Vocabi.Application.Features.Vocabularies.GetPaginatedPendingVocabularies
@using Vocabi.Web.ViewModels
@using Vocabi.Shared.Utils
@inherits BasePage

<PageTitle>Vocabulary Pending List</PageTitle>

<FluentStack Orientation="Orientation.Vertical">
    <FluentStack HorizontalAlignment="HorizontalAlignment.SpaceBetween" VerticalAlignment="VerticalAlignment.Center">
        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentLabel Typo="Typography.H4">
                Vocabulary Pending List
            </FluentLabel>
        </FluentStack>
        <FluentStack VerticalAlignment="VerticalAlignment.Center" Width="auto">
            <FluentButton Appearance="Appearance.Accent"
                          IconStart="@(new Icons.Regular.Size16.Add())"
                          OnClick="Navigation.GoToVocabularyPendingCreate">
                Create
            </FluentButton>
        </FluentStack>
    </FluentStack>

    <FluentStack HorizontalAlignment="HorizontalAlignment.SpaceBetween" VerticalAlignment="VerticalAlignment.Center">
        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentTextField @bind-Value="searchWord" Placeholder="Search word" Style="flex:1;" />
            <FluentButton Title="Search"
                          OnClick="RefreshDataAsync"
                          Loading="isRefreshingData"
                          IconStart="@(new Icons.Regular.Size16.Search())" />
        </FluentStack>
        <FluentStack Width="auto">
            <FluentButton Title="Delete selected"
                          OnClick="()=>{}"
                          Disabled="@(isDeletingMultiple || !isAnyItemSelected)"
                          Loading="isDeletingMultiple"
                          BackgroundColor="var(--error)"
                          Color="var(--neutral-fill-rest)">
                <FluentIcon Value="@(new Icons.Regular.Size16.Delete())" Color="@Color.Fill" Slot="start" />
                @(isDeletingMultiple ? "Deleting..." : $"Delete{(selectedItems.Count() > 0 ? $" ({selectedItems.Count()})" : "")}")
            </FluentButton>
            <FluentButton Title="Export selected to Anki"
                          OnClick="()=>{}"
                          Loading="isExportingMultipleToAnki"
                          Disabled="@(isExportingMultipleToAnki || !isAnyItemSelected)"
                          BackgroundColor="var(--presence-available)"
                          Color="var(--neutral-fill-rest)">
                <FluentIcon Value="@(new Icons.Regular.Size16.ArrowExport())" Color="@Color.Fill" Slot="start" />
                @(isExportingMultipleToAnki ? "Exporting to Anki..." : $"Export to Anki{(selectedItems.Count() > 0 ? $" ({selectedItems.Count()})" : "")}")
            </FluentButton>
        </FluentStack>
    </FluentStack>

    <FluentStack Orientation="Orientation.Vertical">
        <FluentPaginator State="pagination" Style="width:100%;margin-top:0" />
        <FluentDataGrid @ref="dataGrid"
                        Pagination="pagination"
                        TGridItem="PendingVocabularyListItemViewModel"
                        Items="@dataGridItems"
                        RefreshItems="RefreshItemsAsync"
                        Loading="isRefreshingData"
                        GenerateHeader="GenerateHeaderOption.Sticky"
                        DisplayMode="DataGridDisplayMode.Table"
                        OnRowDoubleClick="HandleDoubleClickRow"
                        AutoFit="true"
                        ShowHover="true"
                        Style="width:100%;">
            <ChildContent>
                <SelectColumn TGridItem="PendingVocabularyListItemViewModel"
                              SelectMode="DataGridSelectMode.Multiple"
                              SelectFromEntireRow="false"
                              @bind-SelectedItems="selectedItems" />
                <PropertyColumn Property="@(c => c.Word)" />
                <PropertyColumn Property="@(c => c.PartOfSpeech)" Title="Part of speech" />
                <PropertyColumn Property="@(c => c.Pronunciation)" />
                <PropertyColumn Property="@(c => c.Cloze)" />
                <PropertyColumn Property="@(c => c.Meaning)" />
                <TemplateColumn Title="Actions" Align="@Align.Center">
                    <FluentButton Title="View"
                                  OnClick="() => Navigation.GoToVocabularyPendingDetail(context.Id)"
                                  IconEnd="@(new Icons.Regular.Size20.Eye())" />
                    <FluentButton Title="Edit"
                                  OnClick="() => Navigation.GoToVocabularyPendingEdit(context.Id)">
                        <FluentIcon Value="@(new Icons.Regular.Size16.Edit())" Color="Color.Warning" />
                    </FluentButton>
                    <FluentButton Title="Delete"
                                  OnClick="() => OpenDeleteDialogAsync(context)">
                        <FluentIcon Value="@(new Icons.Regular.Size16.Delete())" Color="Color.Error" />
                    </FluentButton>
                    <FluentButton Title="Export"
                                  OnClick="() => HandleExportAsync(context.Id)">
                        <FluentIcon Value="@(new Icons.Regular.Size16.ArrowExport())"
                                    Color="Color.Custom"
                                    CustomColor="var(--presence-available)" />
                    </FluentButton>
                </TemplateColumn>
            </ChildContent>
            <EmptyContent>
                <FluentStack Orientation="Orientation.Horizontal"
                             HorizontalAlignment="HorizontalAlignment.Center"
                             VerticalAlignment="VerticalAlignment.Center"
                             HorizontalGap="10">
                    <FluentIcon Value="@(new Icons.Filled.Size24.Crown())" Color="@Color.Accent" />
                    <div>Nothing to see here. Carry on!</div>
                </FluentStack>
            </EmptyContent>
        </FluentDataGrid>
    </FluentStack>
</FluentStack>