@page "/vocabularies/create"
@rendermode InteractiveServer
@using Vocabi.Shared
@inherits BasePage

<PageTitle>Create Vocab</PageTitle>

<FluentStack Orientation="Orientation.Vertical">
    <FluentStack HorizontalAlignment="HorizontalAlignment.SpaceBetween" VerticalAlignment="VerticalAlignment.Center">
        <FluentStack VerticalAlignment="VerticalAlignment.Center">
            <FluentLabel Typo="Typography.H4">
                Create Vocab
            </FluentLabel>
            <FluentIcon Value="@(new Icons.Regular.Size16.Info())" />
        </FluentStack>
        @* <FluentStack VerticalAlignment="VerticalAlignment.Center" Width="auto">
            <FluentButton OnClick="SubmitAsync"
                          Appearance="Appearance.Accent"
                          IconStart="@(new Icons.Regular.Size16.Add())"
                          Loading="@_isSubmitting"
                          Style="min-width:80px">
                @(_isSubmitting ? "Creating..." : "Create")
            </FluentButton>

            <FluentButton OnClick="@ClearForm"
                          Appearance="Appearance.Neutral"
                          IconStart="@(new Icons.Regular.Size16.Broom())"
                          Style="min-width:80px">
                Clear
            </FluentButton>
        </FluentStack> *@
    </FluentStack>

    <FluentEditForm EditContext="editContext" style="width:100%">
        <DataAnnotationsValidator />
        @* <CustomValidator @ref="_customValidator" /> *@

        <div style="color: var(--error);">
            <FluentValidationSummary />
        </div>

        <FluentStack Orientation="Orientation.Vertical" VerticalGap="12">
            <FluentStack VerticalAlignment="VerticalAlignment.Bottom">
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch" VerticalGap="0" Style="flex:1;">
                    <FluentTextField @bind-Value="@vocabularyUpsertDto.Word"
                                     Name="word" Label="Word"
                                     Required Autofocus />
                </FluentStack>
                <FluentButton Appearance="Appearance.Accent"
                              IconStart="@(new Icons.Regular.Size20.GlobeSearch())"
                              OnClick="LookupWordAsync"
                              Loading="@isWordSearching">
                    @(isWordSearching ? "Searching..." : "Search word")
                </FluentButton>
                @* <FluentButton Appearance="Appearance.Accent"
                              IconStart="@(new Icons.Regular.Size20.ImageSearch())"
                              OnClick="LookupMediaAsync"
                              Loading="@_isMediaSearching">
                    @(_isMediaSearching ? "Searching..." : "Search media")
                </FluentButton> *@
            </FluentStack>

            @* <FluentStack>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch" VerticalGap="0">
                    <FluentCombobox @bind-Value="@ViewModel.Detail.WordType"
                                    @onchange="HandleChangeWordType"
                                    Name="WordType" Label="Word type"
                                    Items="@_availableWordTypes" />
                </FluentStack>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch" VerticalGap="0">
                    <FluentTextField @bind-Value="@ViewModel.Detail.Phonetic"
                                     Name="phonetic" Label="Phonetic"
                                     Appearance="FluentInputAppearance.Filled"
                                     ReadOnly />
                </FluentStack>
            </FluentStack>

            <FluentStack>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch" VerticalGap="0">
                    <FluentCombobox @bind-Value="@ViewModel.Detail.Meaning"
                                    Name="meaning" Label="Meaning"
                                    Items="_availableMeanings"
                                    Required />
                </FluentStack>
                <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch" VerticalGap="0">
                    <FluentTextField @bind-Value="@ViewModel.Detail.MaskedWord"
                                     Name="maskedWord" Label="Masked word" />
                </FluentStack>
            </FluentStack>

            <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch" VerticalGap="0">
                <FluentCombobox @bind-Value="@ViewModel.Detail.Definition"
                                @onchange="HandleChangeDefinition"
                                Name="definition" Label="Definition"
                                Items="@_availableDefinitions"
                                Required />
            </FluentStack>

            <FluentStack Orientation="Orientation.Vertical" HorizontalAlignment="HorizontalAlignment.Stretch" VerticalGap="0">
                <FluentCombobox @bind-Value="@ViewModel.Detail.Example"
                                @onchange="HandleChangeExample"
                                Name="example" Label="Example"
                                Items="@_availableExamples" />
            </FluentStack>

            <FluentStack Orientation="Orientation.Vertical" VerticalGap="6">
                <FluentLabel>
                    Attachments
                </FluentLabel>
                <FluentStack VerticalAlignment="VerticalAlignment.Stretch">
                    @foreach (var inputFile in ViewModel.Detail.InputFiles)
                    {
                        <FluentInputFile Mode="InputFileMode.Stream"
                                         MaximumFileCount="1"
                                         MaximumFileSize="@(inputFile.MaxFileSizeInKB * BytesPerKB)"
                                         Accept="@inputFile.Accept"
                                         AnchorId="@inputFile.AnchorId"
                                         OnCompleted="(files) => HandleFileUploadCompletedAsync(files, inputFile)"
                                         Style="position:relative;flex:1;padding:36px;border-radius:4px;">
                            <ChildContent>
                                @{
                                    var fileSourceStyle = "position:absolute;bottom:8px;right:12px;font-size:12px;font-style:italic;";
                                    if (!string.IsNullOrEmpty(inputFile.FilePath))
                                    {
                                        switch (inputFile.FileType)
                                        {
                                            case FileType.Audio:
                                                <div id="@inputFile.AnchorId">
                                                    <audio controls>
                                                        <source src="@inputFile.FilePath" />
                                                        Your browser does not support the audio element.
                                                    </audio>
                                                </div>
                                                <FluentLabel Style="@fileSourceStyle">
                                                    @inputFile.FileSource
                                                </FluentLabel>
                                                break;
                                            case FileType.Image:
                                                <div id="@inputFile.AnchorId">
                                                    <img src="@inputFile.FilePath" style="max-width: 400px;" />
                                                </div>
                                                <FluentLabel Style="@fileSourceStyle">
                                                    @inputFile.FileSource
                                                </FluentLabel>
                                                if (_mediaLookupResult.AlternativeImageUrls.Any())
                                                {
                                                    <FluentIcon Value="@(new Icons.Regular.Size20.ArrowRepeatAll())"
                                                                OnClick="HandleChangeImageAsync"
                                                                Style="position:absolute;top:8px;right:32px;" />
                                                }
                                                break;
                                        }
                                        <FluentIcon Value="@(new Icons.Regular.Size20.Dismiss())"
                                                    OnClick="@(() => HandleRemoveFile(inputFile.FileType))"
                                                    Style="position:absolute;top:8px;right:8px;" />
                                    }
                                    else
                                    {
                                        <FluentStack Id="@inputFile.AnchorId"
                                                     Orientation="Orientation.Vertical"
                                                     HorizontalAlignment="HorizontalAlignment.Center">
                                            <FluentIcon Value="@inputFile.Icon" />
                                            <FluentLabel>
                                                @inputFile.GetPlaceholder()
                                            </FluentLabel>
                                        </FluentStack>
                                    }
                                }
                            </ChildContent>
                        </FluentInputFile>
                    }
                </FluentStack>
            </FluentStack> *@
        </FluentStack>
    </FluentEditForm>
</FluentStack>